buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.boxfuse.client:flyway-release:4.0.3"
        classpath "gradle.plugin.io.github.divinespear:jpa-schema-gradle-plugin:0.2.0-1"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.1-rc3"
    }
}

ext {
//  Root ==================================
    springVersion = '4.3.2.RELEASE'
    securityVersion = '4.1.3.RELEASE'
    groovyVersion = '2.3.11'

//  Interface =============================
    servletVersion = '3.1.0'
//  Template
    handelbarViewResolverVersion = '4.0.6'

//  Domain ================================
    springDataJpaVersion = '1.10.2.RELEASE'
    hibernateVersion = '5.2.2.Final'
    hibernateJpaVersion = '1.0.0.Final'
    jadiraUserTypeVersion = '6.0.0.GA'
    mysqlConnectorVersion = '5.1.38'

//  Logging ===============================
    slf4jVersion = '1.7.21'
    logbackVersion = '1.1.7'

//  Other =================================
    lombokVersion = '1.16.10'
    guavaVersion = '19.0'
    commonsIoVersion = '2.5'
    commonsLang3Version = '3.4'
    jacocoVersion = '0.7.7.201606060606'

//  Test ==================================
    spockVersion = '1.0-groovy-2.4'
    junitVerison = '4.12'
    randomBeansVersion = '2.0.0'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'eclipse'
    apply plugin: 'eclipse-wtp'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: "org.sonarqube"
    apply plugin: "io.github.divinespear.jpa-schema-generate"

    repositories {
        mavenCentral()
    }

    version '1.0-SNAPSHOT'

    sourceCompatibility = 1.8

    task wrapper(type: Wrapper) {
        gradleVersion = '2.9'
    }

    jacoco {
        toolVersion = "${jacocoVersion}"
    }
    jacocoTestReport.enabled = true


    sonarqube {
        properties {
            property "sonar.projectName", "Alberence"
            property "sonar.projectKey", "Alberence"
            property 'sonar.projectVersion', "${version}"
            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/jacoco.exec"
            property "sonar.exclusions", "file:**/generated/**"
        }
    }

    dependencies {
        // Groovy =====================================================
        compile("org.codehaus.groovy:groovy-all:${groovyVersion}")
        // Spring =====================================================
        compile("org.springframework:spring-core:${springVersion}") {
            exclude group: 'commons-logging'
        }
        compile("org.springframework:spring-context:${springVersion}")
        compile("org.springframework:spring-aspects:${springVersion}")

        // Logging ====================================================
        compile("org.slf4j:slf4j-api:${slf4jVersion}")
        runtime("org.slf4j:jcl-over-slf4j:${slf4jVersion}")
        runtime("ch.qos.logback:logback-classic:${logbackVersion}")

        // Util =======================================================
        compile("org.projectlombok:lombok:${lombokVersion}")
        compile("com.google.guava:guava:${guavaVersion}")

        // Test =======================================================
        testCompile("org.spockframework:spock-core:${spockVersion}")
        testCompile("org.spockframework:spock-spring:${spockVersion}")
        testCompile("org.springframework:spring-test:${springVersion}")
        testCompile("io.github.benas:random-beans:${randomBeansVersion}")
        testCompile("junit:junit:${junitVerison}")
        testCompile(group: "junit", name: "junit", version: "${junitVerison}")
    }
}
